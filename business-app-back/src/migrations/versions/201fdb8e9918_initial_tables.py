"""initial tables

Revision ID: 201fdb8e9918
Revises: 
Create Date: 2025-05-01 09:54:50.488373

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '201fdb8e9918'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('achievement',
    sa.Column('name', sa.String(length=100), nullable=False, comment="Название достижения (например: 'Первый миллион')"),
    sa.Column('description', sa.Text(), nullable=False, comment='Условие получения достижения'),
    sa.Column('icon_url', sa.String(length=255), nullable=False, comment='Ссылка на иконку достижения'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('app_settings',
    sa.Column('key', sa.String(length=50), nullable=False, comment="Ключ настройки (например: 'theme')"),
    sa.Column('value', sa.JSON(), nullable=False, comment='Значение настройки в JSON-формате'),
    sa.Column('description', sa.Text(), nullable=False, comment='Описание назначения настройки'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key')
    )
    op.create_table('level',
    sa.Column('level_number', sa.Integer(), nullable=False, comment='Номер уровня (например: 5)'),
    sa.Column('required_xp', sa.Integer(), nullable=False, comment='Необходимый опыт для достижения уровня'),
    sa.Column('title', sa.String(length=50), nullable=False, comment="Название уровня (например: 'Новичок')"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('level_number')
    )
    op.create_table('role',
    sa.Column('name', sa.Enum('USER', 'ADMIN', 'MODERATOR', name='roletype'), nullable=False, comment='Название роли из предопределенного списка'),
    sa.Column('description', sa.String(length=255), nullable=True, comment="Описание роли (например: 'Администратор системы')"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('stock_exchange',
    sa.Column('name', sa.String(length=100), nullable=False, comment="Название биржи (например: 'NASDAQ')"),
    sa.Column('country', sa.String(length=50), nullable=False, comment="Страна регистрации (например: 'США')"),
    sa.Column('currency', sa.String(length=3), nullable=False, comment="Основная валюта (например: 'USD')"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('username', sa.String(length=50), nullable=False, comment="Уникальный логин пользователя (например: 'john_doe_2024')"),
    sa.Column('email', sa.String(length=100), nullable=False, comment="Почтовый адрес пользователя (например: 'user@example.com')"),
    sa.Column('password_hash', sa.String(length=128), nullable=False, comment='Хэшированный пароль с использованием bcrypt'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Флаг активности аккаунта (True/False)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('business',
    sa.Column('name', sa.String(length=100), nullable=False, comment="Название бизнеса (например: 'Моя криптоферма')"),
    sa.Column('description', sa.Text(), nullable=True, comment='Подробное описание бизнеса'),
    sa.Column('business_type', sa.Enum('PHYSICAL', 'VIRTUAL', name='businesstype'), nullable=False, comment='Тип бизнеса: physical или virtual'),
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('message',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False, comment='Текст сообщения'),
    sa.Column('is_read', sa.Boolean(), nullable=False, comment='Флаг прочтения сообщения'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('notification',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=False, comment='Заголовок уведомления'),
    sa.Column('message', sa.Text(), nullable=False, comment='Текст уведомления'),
    sa.Column('is_read', sa.Boolean(), nullable=False, comment='Флаг прочтения уведомления'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stock',
    sa.Column('exchange_id', sa.UUID(), nullable=False),
    sa.Column('symbol', sa.String(length=10), nullable=False, comment="Тикер акции (например: 'AAPL')"),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Полное название компании'),
    sa.Column('current_price', sa.Float(), nullable=False, comment='Текущая цена акции'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['exchange_id'], ['stock_exchange.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('symbol')
    )
    op.create_table('user_achievements',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('achievement_id', sa.UUID(), nullable=False),
    sa.Column('unlocked_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'achievement_id')
    )
    op.create_table('user_profile',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=True, comment="Имя пользователя (например: 'Иван')"),
    sa.Column('last_name', sa.String(length=50), nullable=True, comment="Фамилия пользователя (например: 'Петров')"),
    sa.Column('avatar_url', sa.String(length=255), nullable=True, comment="Ссылка на аватар (например: 'https://example.com/avatar.jpg')"),
    sa.Column('bio', sa.Text(), nullable=True, comment='Краткая биография пользователя'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('user_stats',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('total_businesses', sa.Integer(), nullable=False, comment='Общее количество бизнесов пользователя'),
    sa.Column('total_capital', sa.Float(), nullable=False, comment='Совокупный капитал во всех бизнесах'),
    sa.Column('success_rate', sa.Float(), nullable=False, comment='Рейтинг успешности от 0.0 до 1.0'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('physical_business_settings',
    sa.Column('business_id', sa.UUID(), nullable=False),
    sa.Column('location', sa.String(length=255), nullable=False, comment="Координаты местоположения (например: '55.7558,37.6173')"),
    sa.Column('size_sq_meters', sa.Float(), nullable=False, comment='Площадь помещения в квадратных метрах'),
    sa.Column('employee_count', sa.Integer(), nullable=False, comment='Количество сотрудников'),
    sa.Column('equipment', sa.JSON(), nullable=False, comment="Оборудование в формате JSON (например: {'станки': 5, 'транспорт': 2})"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['business_id'], ['business.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('business_id')
    )
    op.create_table('report',
    sa.Column('business_id', sa.UUID(), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False, comment='Начало отчетного периода'),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False, comment='Конец отчетного периода'),
    sa.Column('metrics', sa.JSON(), nullable=False, comment="Метрики в формате JSON (например: {'прибыль': 5000})"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['business_id'], ['business.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('transaction',
    sa.Column('business_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False, comment='Сумма транзакции'),
    sa.Column('transaction_type', sa.Enum('INVESTMENT', 'WITHDRAWAL', 'TRANSFER', name='transactiontype'), nullable=False, comment='Тип транзакции'),
    sa.Column('details', sa.JSON(), nullable=False, comment='Детали транзакции в JSON-формате'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['business_id'], ['business.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('virtual_business_settings',
    sa.Column('business_id', sa.UUID(), nullable=False),
    sa.Column('initial_capital', sa.Float(), nullable=False, comment='Начальный капитал в виртуальной валюте'),
    sa.Column('risk_level', sa.Integer(), nullable=False, comment='Уровень риска от 1 (низкий) до 5 (высокий)'),
    sa.Column('portfolio', sa.JSON(), nullable=False, comment="Структура портфеля (например: {'BTC': 60, 'ETH': 40})"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['business_id'], ['business.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('business_id')
    )
    op.create_table('profit_physical_business',
    sa.Column('settings_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False, comment='Сумма прибыли'),
    sa.Column('period', sa.String(length=20), nullable=False, comment="Период (например: '2024-04')"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['settings_id'], ['physical_business_settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('profit_virtual_business',
    sa.Column('settings_id', sa.UUID(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False, comment='Сумма прибыли в виртуальной валюте'),
    sa.Column('period', sa.String(length=20), nullable=False, comment="Период (например: '2024-04')"),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['settings_id'], ['virtual_business_settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('strategy_physical_business',
    sa.Column('settings_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False, comment="Название стратегии (например: 'Оптимизация логистики')"),
    sa.Column('description', sa.Text(), nullable=False, comment='Подробное описание стратегии'),
    sa.Column('parameters', sa.JSON(), nullable=False, comment='Параметры стратегии в JSON-формате'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['settings_id'], ['physical_business_settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_briefcase',
    sa.Column('settings_id', sa.UUID(), nullable=False),
    sa.Column('assets', sa.JSON(), nullable=False, comment="Активы в портфеле (например: {'акции': ['AAPL', 'TSLA']})"),
    sa.Column('balance', sa.Float(), nullable=False, comment='Текущий баланс виртуальных средств'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['settings_id'], ['virtual_business_settings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_briefcase')
    op.drop_table('strategy_physical_business')
    op.drop_table('profit_virtual_business')
    op.drop_table('profit_physical_business')
    op.drop_table('virtual_business_settings')
    op.drop_table('transaction')
    op.drop_table('report')
    op.drop_table('physical_business_settings')
    op.drop_table('user_stats')
    op.drop_table('user_roles')
    op.drop_table('user_profile')
    op.drop_table('user_achievements')
    op.drop_table('stock')
    op.drop_table('notification')
    op.drop_table('message')
    op.drop_table('business')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('stock_exchange')
    op.drop_table('role')
    op.drop_table('level')
    op.drop_table('app_settings')
    op.drop_table('achievement')
    # ### end Alembic commands ###
