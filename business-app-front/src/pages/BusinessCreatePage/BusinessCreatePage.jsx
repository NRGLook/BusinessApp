import { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
    Box,
    TextField,
    Button,
    Typography,
    MenuItem,
    Alert,
    CircularProgress
} from "@mui/material";
import axios from "../../api/axios";

export default function BusinessCreatePage() {
    const navigate = useNavigate();

    const [form, setForm] = useState({
        name: "",
        description: "",
        business_type: "PHYSICAL", // –∏–ª–∏ "VIRTUAL"
        initial_investment: "",
        operational_costs: "",
        expected_revenue: "",
        break_even_months: "",
    });

    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm((prev) => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError("");

        const userId = localStorage.getItem("user_id");

        const payload = {
            data: [
                {
                    ...form,
                    initial_investment: Number(form.initial_investment),
                    operational_costs: Number(form.operational_costs),
                    expected_revenue: Number(form.expected_revenue),
                    break_even_months: form.break_even_months ? Number(form.break_even_months) : null,
                    owner_id: userId,
                }
            ]
        };

        console.log("üì§ Payload:", payload);

        try {
            const response = await axios.post("/business", payload, {
                headers: {
                    Authorization: `Bearer ${localStorage.getItem("token")}`,
                },
            });

            // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –≤–µ—Ä–Ω–∞
            console.log("‚úÖ Response from server:", response.data);

            if (Array.isArray(response.data) && response.data.length > 0) {
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                const business = response.data[0];
                if (business?.id) {
                    console.log(`üöÄ Business created with ID: ${business.id}`);

                    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
                    navigate(`/business/${business.id}`);
                } else {
                    console.error("‚ùå No business ID found in the response data");
                    setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–µ.");
                }
            } else {
                console.error("‚ùå Response data is not an array or is empty");
                setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±–∏–∑–Ω–µ—Å–µ.");
            }
        } catch (err) {
            console.error("‚ùå Error:", err.response?.data);
            const apiMessage = err.response?.data?.detail || err.response?.data?.message;
            setError(apiMessage || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞");
        } finally {
            setLoading(false);
        }
    };

    return (
        <Box sx={{ p: 4, maxWidth: 600, mx: "auto" }}>
            <Typography variant="h4" gutterBottom>
                –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞
            </Typography>

            <form onSubmit={handleSubmit}>
                <TextField
                    label="–ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞"
                    name="name"
                    value={form.name}
                    onChange={handleChange}
                    fullWidth
                    margin="normal"
                    required
                />

                <TextField
                    label="–û–ø–∏—Å–∞–Ω–∏–µ"
                    name="description"
                    value={form.description}
                    onChange={handleChange}
                    fullWidth
                    margin="normal"
                    multiline
                    rows={3}
                />

                <TextField
                    select
                    label="–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞"
                    name="business_type"
                    value={form.business_type}
                    onChange={handleChange}
                    fullWidth
                    margin="normal"
                >
                    <MenuItem value="PHYSICAL">–§–∏–∑–∏—á–µ—Å–∫–∏–π</MenuItem>
                    <MenuItem value="VIRTUAL">–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π</MenuItem>
                </TextField>

                <TextField
                    label="–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (‚ÇΩ)"
                    name="initial_investment"
                    value={form.initial_investment}
                    onChange={handleChange}
                    type="number"
                    fullWidth
                    margin="normal"
                />

                <TextField
                    label="–ú–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (‚ÇΩ)"
                    name="operational_costs"
                    value={form.operational_costs}
                    onChange={handleChange}
                    type="number"
                    fullWidth
                    margin="normal"
                />

                <TextField
                    label="–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥ (‚ÇΩ)"
                    name="expected_revenue"
                    value={form.expected_revenue}
                    onChange={handleChange}
                    type="number"
                    fullWidth
                    margin="normal"
                />

                <TextField
                    label="–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–º–µ—Å.)"
                    name="break_even_months"
                    value={form.break_even_months}
                    onChange={handleChange}
                    type="number"
                    fullWidth
                    margin="normal"
                />

                {error && <Alert severity="error" sx={{ mt: 2 }}>{error}</Alert>}

                <Box sx={{ mt: 3, display: "flex", justifyContent: "space-between" }}>
                    <Button
                        type="submit"
                        variant="contained"
                        disabled={loading}
                    >
                        {loading ? <CircularProgress size={24} /> : "–°–æ–∑–¥–∞—Ç—å"}
                    </Button>
                    <Button
                        variant="outlined"
                        onClick={() => navigate("/business")}
                    >
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                </Box>
            </form>
        </Box>
    );
}
